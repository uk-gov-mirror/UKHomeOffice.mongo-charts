worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {
    # Handling Protocol forwarding (5 states)
    # Performs rough matching on https/http & on/off to determine if it should be enabled.
    # Should prioritise earlier matches (ie $http_front_end_https before $http_x_forwarded_protocol).
    # Turning on multiple conflicting versions of this header is undefined behaviour - something will be set
    map "$http_x_forwarded_proto:$http_front_end_https:$http_x_forwarded_protocol:$http_x_forwarded_ssl:$http_x_url_scheme" $http_proto {
        "~*^.*https.*"  "https";
        "~*^.*on.*"     "https";
        "~*.*http.*"    "http";
        "~*.*off.*"     "http";
        default         "http";
    }

    # Handling Port forwarding
    # (3 states, 'default', empty string, ':[port numbers]')
    # We will replace 80 with a `default` in http mode, and the same for 443 in https
    # Will prepend a `:` if a number is provided, otherwise returns empty string.
    map $http_x_forwarded_port $http_port {
      "~80"              "default";
      "~8111"            "default";
      "~[0-9]+"          ":$http_x_forwarded_port";
    }

    # Handling the location endpoint
    # $host contains the `Host` header without the port number, so we use it in the default port case.
    # Otherwise, these are broken down into handling the 3 http_port cases, for the X-Forwarded-Host and without.
    map "$http_x_forwarded_host,$http_host,$http_port" $location_endpoint {
      # When X-Forwarded-Host is provided
      "~*^[^,]+,[^,]*,:[0-9]+$"                "$http_x_forwarded_host";
      "~*^[^,]+,[^,]*,default$"                "$http_x_forwarded_host";
      "~*^[^,]+,[^,]*,$"                       "$http_x_forwarded_host";

      # When X-Forwarded-Host isn't provided
      "~*^,[^,]+,:[0-9]+$"                "$host";
      "~*^,[^,]+,default$"                "$host";
      "~*^,[^,]+,$"                       "$host";

      default           "$host";
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    gzip on;
    gzip_http_version 1.0;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # make sure gzip does not lose large gzipped js or css files
    # see http://blog.leetsoft.com/2007/7/25/nginx-gzip-ssl
    gzip_buffers 16 8k;

    # don't send the nginx version number in error pages and Server header
    server_tokens off;

    # config to not allow the browser to render the page inside a frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options DENY;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    server {
        listen       8111;
        server_name  localhost;
        root   /usr/share/nginx/html;

        # prevent index.html, app.json & favicon.ico to be cached
        location ~ "^/(index\.html|app\.json|favicon\.ico)$" {
            add_header "Cache-Control" "no-cache, must-revalidate";
            # repeat following headers as add_header clears all header set by parent
            add_header X-Frame-Options DENY;
            add_header X-XSS-Protection "1; mode=block";
        }

        # Any topojson files should be cached, but are not immutable
        location ~* "\.(json)$"{
          try_files $uri =404;

          # only cache the topojson for two weeks
          add_header "Cache-Control" "public, max-age=1209600";
          # repeat following headers as add_header clears all header set by parent
          add_header X-Frame-Options DENY;
          add_header X-XSS-Protection "1; mode=block";
        }

        # Any route containing a file extension (e.g. /app.json)
        location ~ "^.+\.\w{1,5}$" {
            try_files $uri =404;
            # cache for 100 years if immutable is not supported by UA
            add_header "Cache-Control" "public, max-age=3153600000, immutable";
            # repeat following headers as add_header clears all header set by parent
            add_header X-Frame-Options DENY;
            add_header X-XSS-Protection "1; mode=block";
        }

        # reverse proxy for all Stitch requests
        location /api/ {
            # mock the location endpoint call to something we control / prefer
            if ($request_uri ~ "/api/.*/location$") {
              add_header Content-Type application/json;
              set $locationResponse "{\"deployment_model\":\"GLOBAL\",\"location\":\"US-VA\",\"hostname\":\"$http_proto://$location_endpoint:8111\"}";
              return 200 $locationResponse;
            }

            proxy_pass http://localhost:8080/api/;
        }

        # serve index.html for embed uri but allow it to be embedded in iframe
        location ~ "^/[^/.]+/embed/charts" {
            try_files /index.html /index.html;
            # repeat following headers as add_header clears all header set by parent
            add_header X-XSS-Protection "1; mode=block";
            add_header "Cache-Control" "no-cache, must-revalidate";
        }

        # route all requests that don't serve a file through index.html
        location / {
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

    }

}
